name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:


permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: linux
            goarch: s390x
          - goos: linux
            goarch: arm64

    name: Build artifacts
    runs-on: ubuntu-latest
    container:
      image: goreleaser/goreleaser-cross:v1.23
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
    outputs:
      tag_name: ${{ steps.extract_branch.outputs.tag }}
    steps:
      - run: git config --global --add safe.directory *
      - uses: actions/checkout@v4

      - name: Fetch IPInfo GeoIP Database
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          rm pkg/geoip/geoip.db
          wget -qO pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${IPINFO_TOKEN}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"

      - name: Build
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --single-target --clean --skip=validate

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-${{ env.GOOS }}-${{ env.GOARCH }}
          path: |
            ./dist/*/*


  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: build
    name: Release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets
          
      - name: Download Github Repos
        uses: actions/checkout@v4
        with:
          path: ./repos

      - name: Archive and compress binaries
        run: |
          find assets/*/*/* -type f | while read -r file; do
            chmod +x $file
            dir=$(dirname "$file")
            filename=$(basename "$file")
            fileWithoutExt="${filename%.*}"
            zip -jr "$dir/$fileWithoutExt.zip" "$file"
          done

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            assets/*/*/*.zip
            repos/agent/bin/*.zip
          generateReleaseNotes: false
          
  release-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: build
    name: Release Docker images
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Fix permissions
        run: |
          chmod -R +x ./assets/*
          mkdir dist
          mv ./assets/*/*/* ./dist

      - name: Extract branch name
        run: |
          export TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Log into GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up image name
        run: |
          GHCR_IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/nezha-zero-dashboard" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_IMAGE_NAME=$GHCR_IMAGE_NAME" >> $GITHUB_OUTPUT
        id: image-name

      - name: Build dasbboard image And Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: true
          tags: |
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:latest
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:${{ steps.extract_branch.outputs.tag }}